"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vite_1 = require("vite");
const es_module_lexer_1 = require("es-module-lexer");
const magic_string_1 = __importDefault(require("magic-string"));
const CLIENT_ENTRY = require.resolve('vite/dist/client/client.js');
const normalizedClientEntry = vite_1.normalizePath(CLIENT_ENTRY);
const polyfillString = `const p = ${polyfill.toString()};p();`;
function devDynamicImportPolyfillPlugin() {
    let shouldSkip = false;
    return {
        name: 'vite:dev-dynamic-import-polyfill',
        configResolved(config) {
            shouldSkip = config.command === 'build' || config.isProduction;
        },
        transform(code, id) {
            if (id === normalizedClientEntry) {
                const imports = es_module_lexer_1.parse(code)[0].filter((i) => i.d > -1);
                const s = new magic_string_1.default(code);
                for (let index = 0; index < imports.length; index++) {
                    const { d: dynamicIndex } = imports[index];
                    s.overwrite(dynamicIndex, dynamicIndex + 6, `__import__`);
                }
                s.prepend(polyfillString);
                return s.toString();
            }
        },
    };
}
exports.default = devDynamicImportPolyfillPlugin;
function polyfill(modulePath = '.', importFunctionName = '__import__') {
    try {
        self[importFunctionName] = new Function('u', `return import(u)`);
    }
    catch (error) {
        const baseURL = new URL(modulePath, location);
        const cleanup = (script) => {
            URL.revokeObjectURL(script.src);
            script.remove();
        };
        self[importFunctionName] = (url) => new Promise((resolve, reject) => {
            const absURL = new URL(url, baseURL);
            // If the module has already been imported, resolve immediately.
            if (self[importFunctionName].moduleMap[absURL]) {
                return resolve(self[importFunctionName].moduleMap[absURL]);
            }
            const moduleBlob = new Blob([
                `import * as m from '${absURL}';`,
                `${importFunctionName}.moduleMap['${absURL}']=m;`
            ], { type: 'text/javascript' });
            const script = Object.assign(document.createElement('script'), {
                type: 'module',
                src: URL.createObjectURL(moduleBlob),
                onerror() {
                    reject(new Error(`Failed to import: ${url}`));
                    cleanup(script);
                },
                onload() {
                    resolve(self[importFunctionName].moduleMap[absURL]);
                    cleanup(script);
                }
            });
            document.head.appendChild(script);
        });
        self[importFunctionName].moduleMap = {};
    }
}
